from data import open_file_json
import calendar
from telebot import types
from data import config
import pymysql


def button_main_menu():
    '''–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é'''
    buttons = types.InlineKeyboardMarkup(row_width=1)
    button1 = types.InlineKeyboardButton(text='üöó–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏üöó', callback_data='but1')
    button2 = types.InlineKeyboardButton(text='üñä–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ TEST DRIVEüñä', callback_data='but2')
    button3 = types.InlineKeyboardButton(text='üòä–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–µüòä', callback_data='but3')
    button4 = types.InlineKeyboardButton(text='–ù–∞—à —Å–∞–π—Ç', url=config.url)
    buttons.add(button1, button2, button3, button4)
    return buttons


def push_car_button(token_bot, message):
    '''
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –∫–Ω–æ–ø–∫—É –ü–û–°–ú–û–¢–†–ï–¢–¨ –ê–í–¢–û–ú–û–ë–ò–õ–ò
    1. –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏ –∫–Ω–æ–ø–∫—É: –ù–ê–ó–ê–î –í –ú–ï–ù–Æ
    2. –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    3. –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–ê–ó–ê–î –í –ú–ï–ù–Æ' –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    '''
    if 'but1' in message.data:
        data_auto = open_file_json.open_file_json_auto()
        button_auto_list = []
        list_auto_name = [i['AUTO'] for i in data_auto]
        markup_auto = types.InlineKeyboardMarkup(row_width=2)

        for i, y in enumerate(list_auto_name):
            button_auto_list.append(types.InlineKeyboardButton(text=f'{y}',
                                                               callback_data=f'auto{i}'))
        button_back = types.InlineKeyboardButton(text='–ù–ê–ó–ê–î –í –ú–ï–ù–Æ', callback_data='back')
        markup_auto.add(*button_auto_list, button_back)
        token_bot.edit_message_text('–í—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –Ω–∞–ª–∏—á–∏–∏\n'
                                    '–í—ã–±–µ—Ä–µ—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å',
                                    message.message.chat.id,
                                    message.message.message_id,
                                    reply_markup=markup_auto)

    if message.data.startswith('auto'):
        of = open_file_json.open_file_json_auto()
        model_auto_button = int(message.data.replace('auto', ''))
        data_info_auto_list = []
        photo_auto = []
        for y, i in enumerate(of):
            if model_auto_button == y:
                data_info_auto_list.append(i['AUTO'])
                data_info_auto_list.append(i['RUN'])
                data_info_auto_list.append(i['ENGINE'])
                data_info_auto_list.append(i['YEAR_OF_ISSUE'])
                data_info_auto_list.append(i['FUEL'])
                data_info_auto_list.append(str(i['PRICE']))
                for t in i['LINK']:
                    photo_auto.append(types.InputMediaPhoto(t))

        token_bot.send_media_group(message.message.chat.id, photo_auto)
        token_bot.send_message(message.message.chat.id, text='\n'.join(data_info_auto_list))

    if message.data == 'back':
        token_bot.edit_message_text(chat_id=message.message.chat.id,
                                    message_id=message.message.id,
                                    text=f'–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n'
                                    f'–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ\n'
                                    f'<b>–ù–∞–∂–º–∏ ‚û°Ô∏è /help –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã</b>',
                                    reply_markup=button_main_menu(),
                                    parse_mode='html')


def push_test_drive_button(token_bot, message):
    '''
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –∫–Ω–æ–ø–∫—É: –ó–ê–ü–ò–°–ê–¢–¨–°–Ø –ù–ê –¢–ï–°–¢ –î–†–ê–ô–í
    1. –í—ã–≤–æ–¥–∏—Ç –º–µ—Å—è—Ü –¥–ª—è –∑–∞–ø–∏—Å–∏
    2. –í—ã–≤–æ–¥–∏—Ç –¥–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏
    3. –í—ã–≤–æ–¥–∏—Ç –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏
    '''
    if 'but2' in message.data:
        markup_month = types.InlineKeyboardMarkup(row_width=2)
        months = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
                  '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å',
                  ]

        buttons_month = [types.InlineKeyboardButton(text, callback_data=f'month_{i}')
                         for i, text in enumerate(months, 1)
                         ]
        markup_month.add(*buttons_month)
        token_bot.edit_message_text(chat_id=message.message.chat.id,
                                    message_id=message.message.id,
                                    text="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
                                    reply_markup=markup_month)

        return markup_month

    elif 'month_' in message.data:
        month = int(message.data.split("_")[1])
        cal = calendar.monthcalendar(2023, month)
        markup_day = types.InlineKeyboardMarkup(row_width=7)
        for week in cal:
            row = []
            for day in week:
                if day == 0:
                    row.append(types.InlineKeyboardButton(" ", callback_data='none'))
                else:
                    row.append(types.InlineKeyboardButton(str(day), callback_data=f'{str(day)} —á–∏—Å–ª–æ'))
            markup_day.row(*row)

        token_bot.edit_message_text(chat_id=message.message.chat.id,
                                    message_id=message.message.id,
                                    text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:",
                                    reply_markup=markup_day)

        return markup_day
    elif '—á–∏—Å–ª–æ' in message.data:
        markup_time = types.InlineKeyboardMarkup(row_width=4)
        time_but = []
        for i in range(10, 22):
            time_but.append(types.InlineKeyboardButton(f'{i}:00',
                                                       callback_data=f'–≤—Ä–µ–º—è {str(i)}:00'))
        button_back = types.InlineKeyboardButton(text='–ù–ê–ó–ê–î –í –ú–ï–ù–Æ', callback_data='back')
        markup_time.add(*time_but, button_back)
        token_bot.edit_message_text(chat_id=message.message.chat.id,
                                    message_id=message.message.id,
                                    text="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
                                    reply_markup=markup_time)
        return markup_time
    elif 'none' in message.data:
        token_bot.send_message(message.message.chat.id,
                               "–¢–∞–∫–æ–≥–æ –¥–Ω—è –Ω–µ—Ç, –≤—ã–±–µ—Ä–µ—Ç–µ —Ü–∏—Ñ—Ä—É –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö")
    elif '–≤—Ä–µ–º—è ' in message.data:
        token_bot.send_message(message.message.chat.id,
                               f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {message.data}")


def button_response_info_shop(bot_token, message):
    '''
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –∫–Ω–æ–ø–∫—É: –ü–û–°–ú–û–¢–†–ï–¢–¨ –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û–ë –ê–í–¢–û–°–ê–õ–û–ù–ï
    –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–µ
    '''
    if 'but3' in message.data:
        with open('data/info_shop.txt', 'r', encoding='utf-8') as file:
            read = file.read()
        bot_token.send_message(message.from_user.id, read)